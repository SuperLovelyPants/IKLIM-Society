/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package iklim.society.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ELSE = 6;
  /** RegularExpression Id. */
  int FALSE = 7;
  /** RegularExpression Id. */
  int IF = 8;
  /** RegularExpression Id. */
  int INT = 9;
  /** RegularExpression Id. */
  int TRUE = 10;
  /** RegularExpression Id. */
  int TARGET = 11;
  /** RegularExpression Id. */
  int WORKER = 12;
  /** RegularExpression Id. */
  int TARGET_VALUE = 13;
  /** RegularExpression Id. */
  int THIS = 14;
  /** RegularExpression Id. */
  int ASSIGN = 15;
  /** RegularExpression Id. */
  int GT = 16;
  /** RegularExpression Id. */
  int LT = 17;
  /** RegularExpression Id. */
  int BANG = 18;
  /** RegularExpression Id. */
  int EQ = 19;
  /** RegularExpression Id. */
  int LE = 20;
  /** RegularExpression Id. */
  int GE = 21;
  /** RegularExpression Id. */
  int NE = 22;
  /** RegularExpression Id. */
  int SC_OR = 23;
  /** RegularExpression Id. */
  int SC_AND = 24;
  /** RegularExpression Id. */
  int INCR = 25;
  /** RegularExpression Id. */
  int DECR = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int STAR = 29;
  /** RegularExpression Id. */
  int SLASH = 30;
  /** RegularExpression Id. */
  int PLUSASSIGN = 31;
  /** RegularExpression Id. */
  int MINUSASSIGN = 32;
  /** RegularExpression Id. */
  int STARASSIGN = 33;
  /** RegularExpression Id. */
  int SLASHASSIGN = 34;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 35;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 36;
  /** RegularExpression Id. */
  int IDENTIFIER = 37;
  /** RegularExpression Id. */
  int DIGIT = 38;
  /** RegularExpression Id. */
  int LETTER = 39;
  /** RegularExpression Id. */
  int LPAREN = 40;
  /** RegularExpression Id. */
  int RPAREN = 41;
  /** RegularExpression Id. */
  int LBRACE = 42;
  /** RegularExpression Id. */
  int RBRACE = 43;
  /** RegularExpression Id. */
  int LBRACKET = 44;
  /** RegularExpression Id. */
  int RBRACKET = 45;
  /** RegularExpression Id. */
  int SEMICOLON = 46;
  /** RegularExpression Id. */
  int COMMA = 47;
  /** RegularExpression Id. */
  int DOT = 48;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "\"else\"",
    "\"false\"",
    "\"if\"",
    "\"int\"",
    "\"true\"",
    "\"target\"",
    "\"worker\"",
    "\"targetValue\"",
    "\"this\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<IDENTIFIER>",
    "<DIGIT>",
    "<LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"%=\"",
    "\"?\"",
    "\":\"",
    "\"%\"",
  };

}
