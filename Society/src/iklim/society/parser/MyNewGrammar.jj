/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(MyNewGrammar)
package iklim.society.parser;
import iklim.society.node.*;
import iklim.society.visitor.*;
import java.util.LinkedList;

public class MyNewGrammar
{
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        MyNewGrammar.Component();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(MyNewGrammar)

SKIP :
{
  " "
| "\t"
| "\r"
| "\f"
| "\n"
}

TOKEN :
{
  < ELSE : "else" >
| < FALSE : "false" >
| < IF : "if" >
| < INT : "int" >
| < TRUE : "true" >
}

TOKEN :
{
  < TARGET : "target" >
| < WORKER : "worker" >
| < TARGET_VALUE : "targetValue" >
| < THIS : "this" >
}

TOKEN :
{
  < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < BANG : "!" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NE : "!=" >
| < SC_OR : "||" >
| < SC_AND : "&&" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
}

TOKEN :
{
  < INTEGER_LITERAL : 
    < DECIMAL_LITERAL > 
  >
| 
  < #DECIMAL_LITERAL : [ "0"-"9" ] ([ "0"-"9" ])* >
}

TOKEN :
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
}

TOKEN :
{
  < DIGIT : [ "0"-"9" ] >
| < LETTER : 
    [ 
    "$", 
    "A"-"Z", 
    "_", 
    "a"-"z", 
    "\u00c0"-"\u00d6", 
    "\u00d8"-"\u00f6", 
    "\u00f8"-"\u00ff", 
    "\u0100"-"\u1fff", 
    "\u3040"-"\u318f", 
    "\u3300"-"\u337f", 
    "\u3400"-"\u3d2d", 
    "\u4e00"-"\u9fff", 
    "\uf900"-"\ufaff" 
    ] 
  >
}

TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

ASTStatement Component() :
{
  ASTStatement statement;
  BlockStatement b = new BlockStatement();
  LinkedList statements = new LinkedList();
}
{
  (
    statement = Statement()
    {
      statements.add(statement);
    }
  )*
  < EOF >
  {
    b.setStatements(statements);
    return b;
  }
}

ASTStatement Statement() :
{
  ASTStatement statement;
  ASTExpression exp;
}
{
  (
    statement = Block()
  | statement = IfStatement()
  | LOOKAHEAD(Element() (< INCR >
  | < DECR >
  | AssignmentOperator()))
    statement = StatementExpression() ";"
  | statement = Expression() [ ";" ]
  )
  {
    return statement;
  }
}

BlockStatement Block() :
{
  BlockStatement block = new BlockStatement();
  LinkedList statements = new LinkedList();
  ASTStatement s;
}
{
  (
    "{"
    (
      s = Statement()
      {
        statements.add(s);
      }
    )*
    "}"
  )
  {
    block.setStatements(statements);
    return block;
  }
}

ASTStatement StatementExpression() :
{
  ASTExpression var;
  Token t;
  String operator;
  ASTExpression expression;
}
{
  LOOKAHEAD(Element() (< INCR >
| < DECR >))
  var = Element()
  (
    t = < INCR >
  | 
    t = < DECR >
  )
  {
    IncrementStatement i = new IncrementStatement(t.image, (Variable) var);
    return i;
  }
| 
  LOOKAHEAD(Element() AssignmentOperator())
  var = Element() operator = AssignmentOperator() expression = Expression()
  {
    AssignmentStatement assign = new AssignmentStatement(operator, (Variable) var, expression);
    return assign;
  }
}

IfStatement IfStatement() :
{
  ASTExpression cond;
  ASTStatement then;
  ASTStatement els;
  IfStatement i;
}
{
  "if" "(" cond = Expression() ")" then = Statement()
  [
    LOOKAHEAD(1)
    "else" els = Statement()
    {
      i = new IfStatement(cond, then, els);
      return i;
    }
  ]
  {
    i = new IfStatement(cond, then);
    return i;
  }
}

ASTExpression Expression() :
{
  ASTExpression exp;
}
{
  LOOKAHEAD(2)
  exp = ConditionalExpression()
  {
    return exp;
  }
| 
  exp = ConditionalOrExpression()
  {
    return exp;
  }
}

String AssignmentOperator() :
{
  String operator;
}
{
  (
    "="
    {
      operator = "=";
    }
  | "*="
    {
      operator = "*=";
    }
  | "/="
    {
      operator = "/=";
    }
  | "%="
    {
      operator = "%=";
    }
  | "+="
    {
      operator = "+=";
    }
  | "-="
    {
      operator = "-=";
    }
  )
  {
    return operator;
  }
}

ASTExpression ConditionalExpression() :
{
}
{
  LOOKAHEAD(2)
  {
    ASTExpression b;
  }
  b = ConditionalOrExpression()
  {
    return b;
  }
|
  {
    ASTExpression condition;
    ASTExpression trueExpression;
    ASTExpression falseExpression;
  }
  condition = ConditionalOrExpression() "?" trueExpression = Expression() ":" falseExpression = ConditionalExpression()
  {
    ConditionalExpression conditionalExpression = new ConditionalExpression((BooleanExpression) condition, trueExpression, falseExpression);
    return conditionalExpression;
  }
}

ASTExpression ConditionalOrExpression() :
{
  BooleanExpression be;
  ASTExpression e;
  ASTExpression left;
  ASTExpression right;
}
{
  LOOKAHEAD(ConditionalAndExpression() "||")
  left = ConditionalAndExpression() "||" right = ConditionalOrExpression()
  {
    be = new BooleanExpression("||", left, right);
    return be;
  }
| e = ConditionalAndExpression()
  {
    return e;
  }
}

ASTExpression ConditionalAndExpression() :
{
  BooleanExpression be;
  ASTExpression e;
  ASTExpression left;
  ASTExpression right;
}
{
  LOOKAHEAD(EqualityExpression() "&&")
  left = EqualityExpression() "&&" right = ConditionalAndExpression()
  {
    be = new BooleanExpression("&&", left, right);
    return be;
  }
| 
  e = EqualityExpression()
  {
    return e;
  }
}

ASTExpression EqualityExpression() :
{
  BooleanExpression be;
  ASTExpression e;
  ASTExpression left;
  ASTExpression right;
  String operator;
}
{
  LOOKAHEAD(RelationalExpression() EqualityOperator())
  left = RelationalExpression() operator = EqualityOperator() right = EqualityExpression()
  {
    be = new BooleanExpression(operator, left, right);
    return be;
  }
| 
  e = RelationalExpression()
  {
    return e;
  }
}

String EqualityOperator() :
{
}
{
  "=="
  {
    return "==";
  }
| "!="
  {
    return "!=";
  }
}

ASTExpression RelationalExpression() :
{
  BooleanExpression be;
  ASTExpression e;
  ASTExpression left;
  ASTExpression right;
  String operator;
}
{
  LOOKAHEAD(AdditiveExpression() RelationalOperator())
  left = AdditiveExpression() operator = RelationalOperator() right = RelationalExpression()
  {
    be = new BooleanExpression(operator, left, right);
    return be;
  }
| 
  e = AdditiveExpression()
  {
    return e;
  }
}

String RelationalOperator() :
{
}
{
  "<"
  {
    return "<";
  }
| ">"
  {
    return ">";
  }
| "<="
  {
    return "<=";
  }
| ">="
  {
    return ">=";
  }
}

ASTExpression AdditiveExpression() :
{
  OperationExpression ope;
  ASTExpression e;
  ASTExpression left;
  ASTExpression right;
  String operator;
}
{
  LOOKAHEAD(MultiplicativeExpression() AdditiveOperator())
  left = MultiplicativeExpression() operator = AdditiveOperator() right = AdditiveExpression()
  {
    ope = new OperationExpression(operator, left, right);
    return ope;
  }
| 
  e = MultiplicativeExpression()
  {
    return e;
  }
}

String AdditiveOperator() :
{
}
{
  "+"
  {
    return "+";
  }
| "-"
  {
    return "-";
  }
}

ASTExpression MultiplicativeExpression() :
{
  OperationExpression ope;
  ASTExpression e;
  ASTExpression left;
  ASTExpression right;
  String operator;
}
{
  LOOKAHEAD(UnaryExpression() MultiplicativeOperator())
  left = UnaryExpression() operator = MultiplicativeOperator() right = MultiplicativeExpression()
  {
    ope = new OperationExpression(operator, left, right);
    return ope;
  }
| 
  e = UnaryExpression()
  {
    return e;
  }
}

String MultiplicativeOperator() :
{
}
{
  "*"
  {
    return "*";
  }
| "/"
  {
    return "/";
  }
| "%"
  {
    return "%";
  }
}

ASTExpression UnaryExpression() :
{
  ASTExpression e;
  Token t;
}
{
  (
    t = < PLUS >
  | t = < MINUS >
  )
  e = UnaryExpression()
  {
    String sign;
    sign = String.valueOf(t.image);
    if (sign.equals("+"))
    {
      return e;
    }
    else
    {
      MinusExpression m = new MinusExpression(e);
      return m;
    }
  }
| e = UnaryExpressionNotPlusMinus()
  {
    return e;
  }
}

ASTExpression UnaryExpressionNotPlusMinus() :
{
  ASTExpression e;
}
{
  "!" e = UnaryExpression()
  {
    NotExpression n = new NotExpression(e);
    return n;
  }
| e = Element()
  {
    return e;
  }
}

ASTExpression Element() :
{
  ASTExpression exp;
  ASTValue value;
  Variable variable;
}
{
  value = Literal()
  {
    return value;
  }
| "(" exp = Expression() ")"
  {
    return exp;
  }
| 
  < TARGET_VALUE >
  {
    variable = new Variable("TargetValue");
    return variable;
  }
| 
  variable = Variable()
  {
    return variable;
  }
}

Variable Variable() :
{
  Variable variable;
  BaseVariable base;
  String name;
}
{
  LOOKAHEAD(2)
  name = VariableElement() < DOT > variable = Variable()
  {
    base = new BaseVariable(name, variable);
    return base;
  }
| 
  name = VariableElement()
  {
    variable = new Variable(name);
    return variable;
  }
}

String VariableElement() :
{
}
{
  {
    Token t;
  }
  t = < IDENTIFIER >
  {
    return t.image;
  }
| < WORKER >
  {
    return "worker";
  }
| < TARGET >
  {
    return "target";
  }
| < THIS >
  {
    return "this";
  }
}

ASTValue Literal() :
{
  ASTValue v;
}
{
  (
    {
      Token t;
    }
    t = < INTEGER_LITERAL >
    {
      v = new IntValue(Integer.valueOf(t.image));
    }
  | v = BooleanLiteral()
  )
  {
    return v;
  }
}

BooleanValue BooleanLiteral() :
{
  BooleanValue v;
}
{
  "true"
  {
    v = new BooleanValue(true);
    return v;
  }
| "false"
  {
    v = new BooleanValue(false);
    return v;
  }
}

