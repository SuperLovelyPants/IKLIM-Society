/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package javaCC;
import node.*;
import visitor.*;
import java.util.LinkedList;

public class MyNewGrammar implements MyNewGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    MyNewGrammar parser = new MyNewGrammar(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
      try
      {
        MyNewGrammar.Component();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        MyNewGrammar.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public ASTStatement Component() throws ParseException {
  ASTStatement statement;
  BlockStatement b = new BlockStatement();
  LinkedList statements = new LinkedList();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case IF:
      case TRUE:
      case TARGET:
      case WORKER:
      case TARGET_VALUE:
      case THIS:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      statement = Statement();
      statements.add(statement);
    }
    jj_consume_token(0);
    b.setStatements(statements);
    {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement Statement() throws ParseException {
  ASTStatement statement;
  ASTExpression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      statement = Block();
      break;
    case IF:
      statement = IfStatement();
      break;
    case FALSE:
    case TRUE:
    case TARGET:
    case WORKER:
    case TARGET_VALUE:
    case THIS:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      statement = StatementExpression();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return statement;}
    throw new Error("Missing return statement in function");
  }

  static final public BlockStatement Block() throws ParseException {
  BlockStatement block = new BlockStatement();
  LinkedList statements = new LinkedList();
  ASTStatement s;
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case IF:
      case TRUE:
      case TARGET:
      case WORKER:
      case TARGET_VALUE:
      case THIS:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      s = Statement();
        statements.add(s);
    }
    jj_consume_token(RBRACE);
    block.setStatements(statements);
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTStatement StatementExpression() throws ParseException {
  ASTExpression var;
  Token t;
  String operator;
  ASTExpression expression;
    if (jj_2_3(2)) {
      if (jj_2_1(2)) {
        var = Element();
        t = jj_consume_token(INCR);
      } else if (jj_2_2(2)) {
        var = Element();
        t = jj_consume_token(DECR);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      IncrementStatement i = new IncrementStatement(t.image, (Variable) var);
      {if (true) return i;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case TARGET:
      case WORKER:
      case TARGET_VALUE:
      case THIS:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        var = Element();
        operator = AssignmentOperator();
        expression = Expression();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    AssignmentStatement assign = new AssignmentStatement(operator, (Variable) var, expression);
    {if (true) return assign;}
    throw new Error("Missing return statement in function");
  }

  static final public IfStatement IfStatement() throws ParseException {
  ASTExpression cond;
  ASTStatement then;
  ASTStatement els;
  IfStatement i;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    cond = Expression();
    jj_consume_token(RPAREN);
    then = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      els = Statement();
      i = new IfStatement(cond, then, els);
      {if (true) return i;}
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    i = new IfStatement(cond, then);
    {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression Expression() throws ParseException {
  ASTExpression exp;
    if (jj_2_4(2)) {
      exp = ConditionalExpression();
    {if (true) return exp;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case TARGET:
      case WORKER:
      case TARGET_VALUE:
      case THIS:
      case BANG:
      case PLUS:
      case MINUS:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        exp = AdditiveExpression();
    {if (true) return exp;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public String AssignmentOperator() throws ParseException {
  String operator;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      operator = "=";
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      operator = "*=";
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      operator = "/=";
      break;
    case 49:
      jj_consume_token(49);
      operator = "%=";
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      operator = "+=";
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      operator = "-=";
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return operator;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression ConditionalExpression() throws ParseException {
    if (jj_2_5(2)) {
    ASTExpression b;
      b = ConditionalOrExpression();
    {if (true) return b;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case TRUE:
      case TARGET:
      case WORKER:
      case TARGET_VALUE:
      case THIS:
      case BANG:
      case PLUS:
      case MINUS:
      case INTEGER_LITERAL:
      case IDENTIFIER:
      case LPAREN:
    ASTExpression condition;
    ASTExpression trueExpression;
    ASTExpression falseExpression;
        condition = ConditionalOrExpression();
        jj_consume_token(50);
        trueExpression = Expression();
        jj_consume_token(51);
        falseExpression = ConditionalExpression();
    ConditionalExpression conditionalExpression = new ConditionalExpression((BooleanExpression) condition, trueExpression, falseExpression);
    {if (true) return conditionalExpression;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression ConditionalOrExpression() throws ParseException {
  ASTExpression e;
  ASTExpression newE;
  BooleanExpression newnewE;
    e = ConditionalAndExpression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(SC_OR);
      newE = ConditionalAndExpression();
      newnewE = new BooleanExpression();
      newnewE.setLeft(e);
      newnewE.setRight(newE);
      newnewE.setOperator("||");
      e = newnewE;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression ConditionalAndExpression() throws ParseException {
  ASTExpression e;
  ASTExpression newE;
  BooleanExpression newnewE;
    e = EqualityExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(SC_AND);
      newE = EqualityExpression();
      newnewE = new BooleanExpression();
      newnewE.setLeft(e);
      newnewE.setRight(newE);
      newnewE.setOperator("&&");
      e = newnewE;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression EqualityExpression() throws ParseException {
  ASTExpression left;
  ASTExpression right = null;
  String operator = null;
  boolean flag = false;
    left = RelationalExpression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        operator = "==";
        break;
      case NE:
        jj_consume_token(NE);
        operator = "!=";
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = RelationalExpression();
      flag = true;
    }
    if (flag)
    {
      BooleanExpression expression = new BooleanExpression(operator, left, right);
      {if (true) return expression;}
    }
    else
    {
      {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression RelationalExpression() throws ParseException {
  ASTExpression left;
  ASTExpression right = null;
  String operator = null;
  boolean flag = false;
    left = AdditiveExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        operator = "<";
        break;
      case GT:
        jj_consume_token(GT);
        operator = ">";
        break;
      case LE:
        jj_consume_token(LE);
        operator = "<=";
        break;
      case GE:
        jj_consume_token(GE);
        operator = ">=";
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AdditiveExpression();
      flag = true;
    }
    if (flag)
    {
      BooleanExpression expression = new BooleanExpression(operator, left, right);
      {if (true) return expression;}
    }
    else
    {
      {if (true) return left;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression AdditiveExpression() throws ParseException {
  ASTExpression e;
  ASTExpression newE;
  OperationExpression newnewE;
  String operator;
    e = MultiplicativeExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        operator = "+";
        break;
      case MINUS:
        jj_consume_token(MINUS);
        operator = "-";
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      newE = MultiplicativeExpression();
      newnewE = new OperationExpression();
      newnewE.setLeft(e);
      newnewE.setRight(newE);
      newnewE.setOperator(operator);
      e = newnewE;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression MultiplicativeExpression() throws ParseException {
  ASTExpression firstE;
  OperationExpression e = null;
  ASTExpression newE;
  OperationExpression newnewE;
  String operator;
  int flag = 0;
    firstE = UnaryExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case 52:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        operator = "*";
        break;
      case SLASH:
        jj_consume_token(SLASH);
        operator = "/";
        break;
      case 52:
        jj_consume_token(52);
        operator = "%";
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      newE = UnaryExpression();
      if (flag == 0)
      {
        newnewE = new OperationExpression();
        newnewE.setLeft(firstE);
        newnewE.setRight(newE);
        newnewE.setOperator(operator);
        e = newnewE;
        flag++;
      }
      else
      {
        newnewE = new OperationExpression();
        newnewE.setLeft(e);
        newnewE.setRight(newE);
        newnewE.setOperator(operator);
        e = newnewE;
      }
    }
    if (flag == 0)
    {
      {if (true) return firstE;}
    }
    else
    {
      {if (true) return e;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression UnaryExpression() throws ParseException {
  ASTExpression e;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e = UnaryExpression();
      String sign;
      sign = String.valueOf(t.image);
      if (sign.equals("+"))
      {
        {if (true) return e;}
      }
      else
      {
        MinusExpression m = new MinusExpression(e);
        {if (true) return m;}
      }
      break;
    case FALSE:
    case TRUE:
    case TARGET:
    case WORKER:
    case TARGET_VALUE:
    case THIS:
    case BANG:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      e = UnaryExpressionNotPlusMinus();
      {if (true) return e;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression UnaryExpressionNotPlusMinus() throws ParseException {
  ASTExpression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      jj_consume_token(BANG);
      e = UnaryExpression();
    NotExpression n = new NotExpression(e);
    {if (true) return n;}
      break;
    case FALSE:
    case TRUE:
    case TARGET:
    case WORKER:
    case TARGET_VALUE:
    case THIS:
    case INTEGER_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      e = Element();
    {if (true) return e;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTExpression Element() throws ParseException {
  ASTExpression exp;
  ASTValue value;
  Token t;
  int counter = 0;
  Variable variable;
  BaseVariable returnBase = null;
  String name;
  BaseVariable base = null;
  BaseVariable newBase = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
      value = Literal();
    {if (true) return value;}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = Expression();
      jj_consume_token(RPAREN);
    {if (true) return exp;}
      break;
    case TARGET_VALUE:
      jj_consume_token(TARGET_VALUE);
    variable = new Variable("TargetValue");
    {if (true) return variable;}
      break;
    case TARGET:
    case WORKER:
    case THIS:
    case IDENTIFIER:
    Token type = new Token();
    type.image = "default";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TARGET:
      case WORKER:
      case THIS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TARGET:
          type = jj_consume_token(TARGET);
          break;
        case WORKER:
          type = jj_consume_token(WORKER);
          break;
        case THIS:
          type = jj_consume_token(THIS);
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
    variable = new Variable(String.valueOf(t.image));
    counter++;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
      if (counter == 1)
      {
        name = variable.getName();
        variable = new Variable(String.valueOf(t.image));
        base = new BaseVariable(name, variable);
        returnBase = base;
        counter++;
      }
      else
      {
        name = base.getVar().getName();
        variable = new Variable(String.valueOf(t.image));
        newBase = new BaseVariable(name, variable);
        base.setVar(newBase);
        newBase = base;
      }
      }
    TargetVariable target;
    WorkerVariable worker;
    ThisVariable thi;
    if (counter == 1)
    {
      switch (String.valueOf(type.image))
      {
        case "target" :
        target = new TargetVariable(variable);
        {if (true) return target;}
        case "worker" :
        worker = new WorkerVariable(variable);
        {if (true) return worker;}
        case "this" :
        thi = new ThisVariable(variable);
        {if (true) return thi;}
        default :
        {if (true) return variable;}
      }
    }
    else
    {
      switch (String.valueOf(type.image))
      {
        case "target" :
        target = new TargetVariable(returnBase);
        {if (true) return target;}
        case "worker" :
        target = new TargetVariable(returnBase);
        {if (true) return target;}
        case "this" :
        target = new TargetVariable(returnBase);
        {if (true) return target;}
        default :
        {if (true) return returnBase;}
      }
    }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTValue Literal() throws ParseException {
  ASTValue v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      Token t;
      t = jj_consume_token(INTEGER_LITERAL);
      v = new IntValue(Integer.valueOf(t.image));
      break;
    case FALSE:
    case TRUE:
      v = BooleanLiteral();
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public BooleanValue BooleanLiteral() throws ParseException {
  BooleanValue v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
    v = new BooleanValue(true);
    {if (true) return v;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
    v = new BooleanValue(false);
    {if (true) return v;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(TARGET_VALUE)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) return true;
    }
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_29()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7d80,0x7d80,0x7d80,0x7c80,0x40,0x18047c80,0x80008000,0x18047c80,0x800000,0x1000000,0x480000,0x480000,0x330000,0x330000,0x18000000,0x18000000,0x60000000,0x60000000,0x18000000,0x18047c80,0x47c80,0x5800,0x5800,0x0,0x7c80,0x480,0x480,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x528,0x528,0x528,0x128,0x0,0x128,0x20007,0x128,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x128,0x128,0x0,0x0,0x10000,0x128,0x8,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
